datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  @@map("users")
  
  id                    String                 @id @default(cuid())
  username              String              @unique
  email                 String              @unique
  password              String
  name                  String
  active                Boolean             @default(true)
  role                  Role                @default(user)
  refresh_token         RefreshToken[]
  shift_assignments     ShiftAssignment[]
}

model AttendanceLog {
  @@map("attendance_logs")

  id                    Int                 @id @default(autoincrement())
  shift_assignment_id   Int       
  record                DateTime            @default(now())
  category              AttendanceType
  status                AttendanceStatus  
  shift_assignment      ShiftAssignment     @relation(fields: [shift_assignment_id], references: [id])
}

model RefreshToken {
  @@map("refresh_tokens")

  id                  Int       @id @default(autoincrement())
  user_id             String
  token               String    @unique
  expires_at          DateTime
  revoked             Boolean   @default(false)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  user                User      @relation(fields: [user_id], references: [id])
}

model Shift {
  id                  Int                   @id @default(autoincrement())
  name                String
  shift_start         DateTime              @db.Time()
  shift_end           DateTime              @db.Time()
  cross_day           Boolean
  active              Boolean               @default(true)
  shift_assignments   ShiftAssignment[]
}

model ShiftAssignment {
  @@map("shift_assignments")

  id                  Int                     @id @default(autoincrement())
  shift_id            Int
  user_id             String
  shift_start         DateTime
  shift_end           DateTime
  deleted             Boolean                 @default(false)
  deletedAt           DateTime?               
  shift               Shift                   @relation(fields: [shift_id], references: [id])
  user                User                    @relation(fields: [user_id], references: [id])
  attendance_logs     AttendanceLog[]
  daily_summary       DailySummary?
}

model DailySummary {
  @@map("daily_summary")

  id                    Int @id @default(autoincrement())
  shift_assignment_id   Int @unique
  checkin_time          DateTime
  checkout_time         DateTime?
  checkin_status        CheckStatus
  checkout_status       CheckStatus?
  summary_status        SummaryStatus
  work_duration         Int?
  late_duration         Int?
  overtime_duration     Int?
  early_leave_duration  Int?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  shift_assignment      ShiftAssignment @relation(fields: [shift_assignment_id], references: [id])
}



enum Role {
  admin
  user
}

enum AttendanceType {
  checkin
  checkout
}

enum AttendanceStatus {
  ontime
  early_leave
  late_checkout
  missing
  late
}

enum CheckStatus {
  late
  ontime
  early_leave
  late_checkout
  missing
}

enum SummaryStatus {
  present
  absent
  half_day
  missing_checkout
}